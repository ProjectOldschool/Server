// Generated by delombok at Sat Feb 25 09:19:07 PST 2017
package astraeus.game.model.entity.mob.npc.drop;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * A class which represents a single npc drop.
 *
 * @author Vult-R https://github.com/Vult-R
 */
public final class NpcDrop {
  public static final int ALWAYS = 1;
  public static final int ALMOST_ALWAYS = 2;
  public static final int VERY_COMMON = 5;
  public static final int COMMON = 20;
  public static final int UNCOMMON = 50;
  public static final int VERY_UNCOMMON = 100;
  public static final int RARE = 200;
  public static final int VERY_RARE = 286;
  public static final int EXTREMELY_RARE = 500;
  public static final int LEGENDARY = 900;
  
  /**
   * The map of npc ids mapped to their potential drops.
   */
  public static final Map<Integer, Drop[]> npcDrops = new HashMap<>();
  
  public static final class Drop {
    
    /**
     * The id of the item being dropped.
     */
    private final int itemId;
    
    /**
     * The minimum amount of this item that can be dropped.
     */
    private final int minAmount;
    
    /**
     * The maximum amount of this item that can be dropped.
     */
    private int maxAmount;
    
    /**
     * The rate at which this item drops.
     */
    private final int rate;
    
    /**
     * The flag that denotes only 1 item will drop.
     */
    private final boolean single;
    
    /**
     * The flag that denotes this drop drops a fixed amount of items.
     */
    private final boolean fixed;
    
    /**
     * Creates a new {@link NpcDrop}.
     *
     * @param itemId
     * The id of the item being dropped.
     *
     * @param rate
     * The rate at which this item drops.
     */
    public Drop(int itemId, int rate) {
      this(itemId, 1, 1, rate);
    }
    
    /**
     * Creates a new {@link NpcDrop}.
     *
     * @param itemId
     * The id of the item being dropped.
     *
     * @param minAmount
     * The minimum amount of this item that can be dropped.
     *
     * @param maxAmount
     * The maximum amount of this item that can be dropped.
     *
     * @param rate
     * The rate at which this item drops.
     */
    public Drop(int itemId, int minAmount, int maxAmount, int rate) {
      this.itemId = itemId;
      this.minAmount = minAmount;
      this.maxAmount = maxAmount;
      this.rate = rate;
      this.single = minAmount == 1 && maxAmount == 1;
      this.fixed = minAmount == maxAmount;
    }
    
    /**
     * Determines if this drop is rare.
     */
    public boolean isFromRareTable() {
      if (rate <= RARE) {
        return true;
      }
      return false;
    }
    
    /**
     * Gets the difference between the max and the min amount.
     */
    public int getExtraAmount() {
      return maxAmount - minAmount;
    }
    
    /**
     * The id of the item being dropped.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int getItemId() {
      return this.itemId;
    }
    
    /**
     * The minimum amount of this item that can be dropped.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int getMinAmount() {
      return this.minAmount;
    }
    
    /**
     * The maximum amount of this item that can be dropped.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int getMaxAmount() {
      return this.maxAmount;
    }
    
    /**
     * The rate at which this item drops.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int getRate() {
      return this.rate;
    }
    
    /**
     * The flag that denotes only 1 item will drop.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean isSingle() {
      return this.single;
    }
    
    /**
     * The flag that denotes this drop drops a fixed amount of items.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean isFixed() {
      return this.fixed;
    }
    
    /**
     * The maximum amount of this item that can be dropped.
     */
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public void setMaxAmount(final int maxAmount) {
      this.maxAmount = maxAmount;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public boolean equals(final java.lang.Object o) {
      if (o == this) return true;
      if (!(o instanceof NpcDrop.Drop)) return false;
      final Drop other = (Drop)o;
      if (this.getItemId() != other.getItemId()) return false;
      if (this.getMinAmount() != other.getMinAmount()) return false;
      if (this.getMaxAmount() != other.getMaxAmount()) return false;
      if (this.getRate() != other.getRate()) return false;
      if (this.isSingle() != other.isSingle()) return false;
      if (this.isFixed() != other.isFixed()) return false;
      return true;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public int hashCode() {
      final int PRIME = 59;
      int result = 1;
      result = result * PRIME + this.getItemId();
      result = result * PRIME + this.getMinAmount();
      result = result * PRIME + this.getMaxAmount();
      result = result * PRIME + this.getRate();
      result = result * PRIME + (this.isSingle() ? 79 : 97);
      result = result * PRIME + (this.isFixed() ? 79 : 97);
      return result;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @javax.annotation.Generated("lombok")
    public java.lang.String toString() {
      return "NpcDrop.Drop(itemId=" + this.getItemId() + ", minAmount=" + this.getMinAmount() + ", maxAmount=" + this.getMaxAmount() + ", rate=" + this.getRate() + ", single=" + this.isSingle() + ", fixed=" + this.isFixed() + ")";
    }
  }
  
  /**
   * The id of the npc that contains these drops.
   */
  private final int npcId;
  
  /**
   * The array of drops that are associated with this npc.
   */
  private final Drop[] drops;
  
  /**
   * Creates a new {@link NpcDrop}.
   *
   * @param npcId
   * The id that these drops belong to.
   *
   * @param drops
   * The drops associated with this npc.
   */
  public NpcDrop(int npcId, Drop[] drops) {
    this.npcId = npcId;
    this.drops = drops;
  }
  
  /**
   * Gets the optional describing the result of looking for a drop.
   *
   * @param id
   * The npc id to check.
   *
   * @return The optional that may contain the array of drops.
   */
  public static Optional<Drop[]> lookup(int id) {
    return Optional.ofNullable(npcDrops.get(id));
  }
  
  /**
   * The id of the npc that contains these drops.
   */
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public int getNpcId() {
    return this.npcId;
  }
  
  /**
   * The array of drops that are associated with this npc.
   */
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Drop[] getDrops() {
    return this.drops;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof NpcDrop)) return false;
    final NpcDrop other = (NpcDrop)o;
    if (this.getNpcId() != other.getNpcId()) return false;
    if (!java.util.Arrays.deepEquals(this.getDrops(), other.getDrops())) return false;
    return true;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getNpcId();
    result = result * PRIME + java.util.Arrays.deepHashCode(this.getDrops());
    return result;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public java.lang.String toString() {
    return "NpcDrop(npcId=" + this.getNpcId() + ", drops=" + java.util.Arrays.deepToString(this.getDrops()) + ")";
  }
}