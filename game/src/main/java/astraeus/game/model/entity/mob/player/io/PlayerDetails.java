// Generated by delombok at Sat Feb 25 09:19:09 PST 2017
package astraeus.game.model.entity.mob.player.io;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import astraeus.game.model.Brightness;
import astraeus.game.model.Position;
import astraeus.game.model.entity.mob.Movement;
import astraeus.game.model.entity.mob.player.Appearance;
import astraeus.game.model.entity.mob.player.Player;
import astraeus.game.model.entity.mob.player.PlayerRights;
import astraeus.game.model.entity.mob.player.skill.Skill;
import astraeus.game.model.sound.Volume;

public final class PlayerDetails {
  private static final transient Gson gson = new GsonBuilder().setPrettyPrinting().create();
  private final String username;
  private final String password;
  private final String hostAddress;
  private final PlayerRights rights;
  private final Position location;
  private final Brightness brightness;
  private final Volume musicVolume;
  private final Volume soundEffectVolume;
  private final Volume areaSoundVolume;
  private final boolean newPlayer;
  private final boolean running;
  private final boolean autoRetaliate;
  private final boolean enableSound;
  private final boolean enableMusic;
  private final boolean debugMode;
  private final boolean mouseButtons;
  private final boolean chatEffects;
  private final boolean splitChat;
  private final boolean acceptAid;
  private final Appearance appearance;
  private final Skill[] skills;
  private final List<Long> friendList;
  private final List<Long> ignoreList;
  
  public PlayerDetails(Player player) {
    username = player.getUsername();
    password = player.getPassword();
    hostAddress = player.getHostAddress();
    rights = player.getRights();
    location = player.getPosition();
    brightness = player.attr().get(Player.BRIGHTNESS_KEY);
    musicVolume = player.attr().get(Player.MUSIC_VOLUME_KEY);
    soundEffectVolume = player.attr().get(Player.SOUND_EFFECT_VOLUME_KEY);
    areaSoundVolume = player.attr().get(Player.AREA_SOUND_VOLUME_KEY);
    newPlayer = player.attr().get(Player.NEW_PLAYER_KEY);
    running = player.attr().get(Movement.RUNNING_KEY);
    autoRetaliate = player.attr().get(Player.AUTO_RETALIATE_KEY);
    enableSound = player.attr().get(Player.SOUND_KEY);
    enableMusic = player.attr().get(Player.MUSIC_KEY);
    debugMode = player.attr().get(Player.DEBUG_KEY);
    mouseButtons = player.attr().get(Player.MOUSE_BUTTON_KEY);
    chatEffects = player.attr().get(Player.CHAT_EFFECTS_KEY);
    splitChat = player.attr().get(Player.SPLIT_CHAT_KEY);
    acceptAid = player.attr().get(Player.ACCEPT_AID_KEY);
    appearance = player.getAppearance();
    skills = player.getSkills().getSkills();
    friendList = player.getPlayerRelation().getFriendList();
    ignoreList = player.getPlayerRelation().getIgnoreList();
  }
  
  public synchronized boolean save() throws IOException {
    final File dir = new File("./data/characters/details/");
    if (!dir.exists()) {
      dir.mkdirs();
    }
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.toString() + File.separator + username + ".json", false))) {
      writer.write(gson.toJson(this));
      return true;
    }
  }
  
  public static synchronized boolean load(Player player) throws IOException {
    final File file = new File("./data/characters/details/" + player.getUsername() + ".json");
    if (!file.exists()) {
      return false;
    }
    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
      final PlayerDetails details = gson.fromJson(reader, PlayerDetails.class);
      player.setUsername(details.getUsername());
      player.setPassword(details.getPassword());
      player.setRights(details.getRights());
      player.setPosition(player.attr().get(Player.NEW_PLAYER_KEY) ? Player.DEFAULT_SPAWN : details.getLocation());
      player.attr().put(Player.NEW_PLAYER_KEY, details.isNewPlayer());
      player.attr().put(Player.BRIGHTNESS_KEY, details.getBrightness());
      player.attr().put(Player.MUSIC_VOLUME_KEY, details.getMusicVolume());
      player.attr().put(Player.SOUND_EFFECT_VOLUME_KEY, details.getSoundEffectVolume());
      player.attr().put(Player.AREA_SOUND_VOLUME_KEY, details.getAreaSoundVolume());
      player.attr().put(Movement.RUNNING_KEY, details.isRunning());
      player.attr().put(Player.AUTO_RETALIATE_KEY, details.isAutoRetaliate());
      player.attr().put(Player.SOUND_KEY, details.isEnableSound());
      player.attr().put(Player.MUSIC_KEY, details.isEnableMusic());
      player.attr().put(Player.DEBUG_KEY, details.isDebugMode());
      player.attr().put(Player.MOUSE_BUTTON_KEY, details.isMouseButtons());
      player.attr().put(Player.CHAT_EFFECTS_KEY, details.isChatEffects());
      player.attr().put(Player.SPLIT_CHAT_KEY, details.isSplitChat());
      player.attr().put(Player.ACCEPT_AID_KEY, details.isAcceptAid());
      if (details.getAppearance() == null) {
        player.getAppearance().getDefaultAppearance();
      } else {
        player.setAppearance(details.getAppearance());
      }
      if (details.getSkills() != null) {
        player.getSkills().setSkills(details.getSkills());
      } else {
        player.getSkills().setDefault();
      }
      if (details.getFriendList().size() > 0) {
        player.getPlayerRelation().setFriendList(details.getFriendList());
      }
      if (details.getIgnoreList().size() > 0) {
        player.getPlayerRelation().setIgnoreList(details.getIgnoreList());
      }
      return true;
    }
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public String getUsername() {
    return this.username;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public String getPassword() {
    return this.password;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public String getHostAddress() {
    return this.hostAddress;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public PlayerRights getRights() {
    return this.rights;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Position getLocation() {
    return this.location;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Brightness getBrightness() {
    return this.brightness;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Volume getMusicVolume() {
    return this.musicVolume;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Volume getSoundEffectVolume() {
    return this.soundEffectVolume;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Volume getAreaSoundVolume() {
    return this.areaSoundVolume;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isNewPlayer() {
    return this.newPlayer;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isRunning() {
    return this.running;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isAutoRetaliate() {
    return this.autoRetaliate;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isEnableSound() {
    return this.enableSound;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isEnableMusic() {
    return this.enableMusic;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isDebugMode() {
    return this.debugMode;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isMouseButtons() {
    return this.mouseButtons;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isChatEffects() {
    return this.chatEffects;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isSplitChat() {
    return this.splitChat;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean isAcceptAid() {
    return this.acceptAid;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Appearance getAppearance() {
    return this.appearance;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public Skill[] getSkills() {
    return this.skills;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public List<Long> getFriendList() {
    return this.friendList;
  }
  
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public List<Long> getIgnoreList() {
    return this.ignoreList;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof PlayerDetails)) return false;
    final PlayerDetails other = (PlayerDetails)o;
    final java.lang.Object this$username = this.getUsername();
    final java.lang.Object other$username = other.getUsername();
    if (this$username == null ? other$username != null : !this$username.equals(other$username)) return false;
    final java.lang.Object this$password = this.getPassword();
    final java.lang.Object other$password = other.getPassword();
    if (this$password == null ? other$password != null : !this$password.equals(other$password)) return false;
    final java.lang.Object this$hostAddress = this.getHostAddress();
    final java.lang.Object other$hostAddress = other.getHostAddress();
    if (this$hostAddress == null ? other$hostAddress != null : !this$hostAddress.equals(other$hostAddress)) return false;
    final java.lang.Object this$rights = this.getRights();
    final java.lang.Object other$rights = other.getRights();
    if (this$rights == null ? other$rights != null : !this$rights.equals(other$rights)) return false;
    final java.lang.Object this$location = this.getLocation();
    final java.lang.Object other$location = other.getLocation();
    if (this$location == null ? other$location != null : !this$location.equals(other$location)) return false;
    final java.lang.Object this$brightness = this.getBrightness();
    final java.lang.Object other$brightness = other.getBrightness();
    if (this$brightness == null ? other$brightness != null : !this$brightness.equals(other$brightness)) return false;
    final java.lang.Object this$musicVolume = this.getMusicVolume();
    final java.lang.Object other$musicVolume = other.getMusicVolume();
    if (this$musicVolume == null ? other$musicVolume != null : !this$musicVolume.equals(other$musicVolume)) return false;
    final java.lang.Object this$soundEffectVolume = this.getSoundEffectVolume();
    final java.lang.Object other$soundEffectVolume = other.getSoundEffectVolume();
    if (this$soundEffectVolume == null ? other$soundEffectVolume != null : !this$soundEffectVolume.equals(other$soundEffectVolume)) return false;
    final java.lang.Object this$areaSoundVolume = this.getAreaSoundVolume();
    final java.lang.Object other$areaSoundVolume = other.getAreaSoundVolume();
    if (this$areaSoundVolume == null ? other$areaSoundVolume != null : !this$areaSoundVolume.equals(other$areaSoundVolume)) return false;
    if (this.isNewPlayer() != other.isNewPlayer()) return false;
    if (this.isRunning() != other.isRunning()) return false;
    if (this.isAutoRetaliate() != other.isAutoRetaliate()) return false;
    if (this.isEnableSound() != other.isEnableSound()) return false;
    if (this.isEnableMusic() != other.isEnableMusic()) return false;
    if (this.isDebugMode() != other.isDebugMode()) return false;
    if (this.isMouseButtons() != other.isMouseButtons()) return false;
    if (this.isChatEffects() != other.isChatEffects()) return false;
    if (this.isSplitChat() != other.isSplitChat()) return false;
    if (this.isAcceptAid() != other.isAcceptAid()) return false;
    final java.lang.Object this$appearance = this.getAppearance();
    final java.lang.Object other$appearance = other.getAppearance();
    if (this$appearance == null ? other$appearance != null : !this$appearance.equals(other$appearance)) return false;
    if (!java.util.Arrays.deepEquals(this.getSkills(), other.getSkills())) return false;
    final java.lang.Object this$friendList = this.getFriendList();
    final java.lang.Object other$friendList = other.getFriendList();
    if (this$friendList == null ? other$friendList != null : !this$friendList.equals(other$friendList)) return false;
    final java.lang.Object this$ignoreList = this.getIgnoreList();
    final java.lang.Object other$ignoreList = other.getIgnoreList();
    if (this$ignoreList == null ? other$ignoreList != null : !this$ignoreList.equals(other$ignoreList)) return false;
    return true;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final java.lang.Object $username = this.getUsername();
    result = result * PRIME + ($username == null ? 0 : $username.hashCode());
    final java.lang.Object $password = this.getPassword();
    result = result * PRIME + ($password == null ? 0 : $password.hashCode());
    final java.lang.Object $hostAddress = this.getHostAddress();
    result = result * PRIME + ($hostAddress == null ? 0 : $hostAddress.hashCode());
    final java.lang.Object $rights = this.getRights();
    result = result * PRIME + ($rights == null ? 0 : $rights.hashCode());
    final java.lang.Object $location = this.getLocation();
    result = result * PRIME + ($location == null ? 0 : $location.hashCode());
    final java.lang.Object $brightness = this.getBrightness();
    result = result * PRIME + ($brightness == null ? 0 : $brightness.hashCode());
    final java.lang.Object $musicVolume = this.getMusicVolume();
    result = result * PRIME + ($musicVolume == null ? 0 : $musicVolume.hashCode());
    final java.lang.Object $soundEffectVolume = this.getSoundEffectVolume();
    result = result * PRIME + ($soundEffectVolume == null ? 0 : $soundEffectVolume.hashCode());
    final java.lang.Object $areaSoundVolume = this.getAreaSoundVolume();
    result = result * PRIME + ($areaSoundVolume == null ? 0 : $areaSoundVolume.hashCode());
    result = result * PRIME + (this.isNewPlayer() ? 79 : 97);
    result = result * PRIME + (this.isRunning() ? 79 : 97);
    result = result * PRIME + (this.isAutoRetaliate() ? 79 : 97);
    result = result * PRIME + (this.isEnableSound() ? 79 : 97);
    result = result * PRIME + (this.isEnableMusic() ? 79 : 97);
    result = result * PRIME + (this.isDebugMode() ? 79 : 97);
    result = result * PRIME + (this.isMouseButtons() ? 79 : 97);
    result = result * PRIME + (this.isChatEffects() ? 79 : 97);
    result = result * PRIME + (this.isSplitChat() ? 79 : 97);
    result = result * PRIME + (this.isAcceptAid() ? 79 : 97);
    final java.lang.Object $appearance = this.getAppearance();
    result = result * PRIME + ($appearance == null ? 0 : $appearance.hashCode());
    result = result * PRIME + java.util.Arrays.deepHashCode(this.getSkills());
    final java.lang.Object $friendList = this.getFriendList();
    result = result * PRIME + ($friendList == null ? 0 : $friendList.hashCode());
    final java.lang.Object $ignoreList = this.getIgnoreList();
    result = result * PRIME + ($ignoreList == null ? 0 : $ignoreList.hashCode());
    return result;
  }
  
  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @javax.annotation.Generated("lombok")
  public java.lang.String toString() {
    return "PlayerDetails(username=" + this.getUsername() + ", password=" + this.getPassword() + ", hostAddress=" + this.getHostAddress() + ", rights=" + this.getRights() + ", location=" + this.getLocation() + ", brightness=" + this.getBrightness() + ", musicVolume=" + this.getMusicVolume() + ", soundEffectVolume=" + this.getSoundEffectVolume() + ", areaSoundVolume=" + this.getAreaSoundVolume() + ", newPlayer=" + this.isNewPlayer() + ", running=" + this.isRunning() + ", autoRetaliate=" + this.isAutoRetaliate() + ", enableSound=" + this.isEnableSound() + ", enableMusic=" + this.isEnableMusic() + ", debugMode=" + this.isDebugMode() + ", mouseButtons=" + this.isMouseButtons() + ", chatEffects=" + this.isChatEffects() + ", splitChat=" + this.isSplitChat() + ", acceptAid=" + this.isAcceptAid() + ", appearance=" + this.getAppearance() + ", skills=" + java.util.Arrays.deepToString(this.getSkills()) + ", friendList=" + this.getFriendList() + ", ignoreList=" + this.getIgnoreList() + ")";
  }
}